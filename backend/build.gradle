plugins {
    id('java')
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

java {
    withSourcesJar()
    withJavadocJar()
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

javadoc {
    (options as StandardJavadocDocletOptions).addBooleanOption('html5', true)
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(project(":scheduler-api"))
    implementation(project(":properties"))
    implementation(group: 'org.apache.thrift', name: 'libthrift', version: '0.15.0')//TODO update to 0.19.0
    implementation(group: 'org.slf4j', name: 'slf4j-api', version: '2.0.9')
    implementation(group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.21.1')
    implementation(group: 'org.apache.logging.log4j', name: 'log4j-slf4j2-impl', version: '2.21.1')
    implementation(group: 'commons-io', name: 'commons-io', version: '2.15.0')
    implementation(group: 'com.github.mwiede', name: 'jsch', version: '0.2.13')
    implementation(group: 'org.hipparchus', name: 'hipparchus-core', version: '3.0')

    //testCompile group: 'junit', name: 'junit', version: '4.12'
    //testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
    //testCompile group: 'org.mockito', name: 'mockito-core', version: '2.22.0'
    //testRuntimeOnly group : 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
}

/*
test {
    useJUnitPlatform{
        includeEngines 'junit-jupiter'
    }
}*/

tasks.register('defaultConfig', Copy) {
    description("Copy ../etc/* into resources")
    from('../etc')
    into('build/resources/main/etc')
}

processResources.configure {
    dependsOn(defaultConfig)
}

jar {
    archiveBaseName = 'ignishpc-backend'
    version = file("../VERSION").text.trim()
    manifest {
        attributes("Implementation-Title": archiveBaseName,
                "Implementation-Version": version)
    }
}

tasks.register('jarlibs', Copy) {
    description('Copy project jar and libraries into jarlibs')
    dependsOn("jar")
    delete(layout.buildDirectory.file("jarlibs"))
    from(jar, project.configurations.compileClasspath)
    into(layout.buildDirectory.file("jarlibs"))
}
