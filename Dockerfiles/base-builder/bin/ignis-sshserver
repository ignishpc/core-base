#!/bin/env bash

source "${IGNIS_HOME}/etc/environment"

if [ -z "${NSS_WRAPPER_PASSWD}" ]; then
  USER=$(whoami 2>/dev/null || echo ignis)
  mkdir -p -m 700 "${IGNIS_JOB_CONTAINER_DIR}"
  echo "${USER}:x:$(id -u):$(id -g):${USER}:/tmp:/bin/bash" > "${IGNIS_JOB_CONTAINER_DIR}/passwd"
  echo "sshd:x:$(id -u):$(id -g):sshd:/tmp:/bin/bash" >> "${IGNIS_JOB_CONTAINER_DIR}/passwd"
  echo "${USER}:x:$(id -g):${USER}" > "${IGNIS_JOB_CONTAINER_DIR}/group"

  LD_PRELOAD=libnss_wrapper.so \
   NSS_WRAPPER_PASSWD="${IGNIS_JOB_CONTAINER_DIR}/passwd" \
   NSS_WRAPPER_GROUP="${IGNIS_JOB_CONTAINER_DIR}/group" \
   exec $0 "$@"
fi

MODE=$1
PORT=$2
H_INTERVAL=${IGNIS_HEALTHCHECK_INTERVAL}
H_TIMEOUT=${IGNIS_HEALTHCHECK_TIMEOUT}
H_RETRIES=${IGNIS_HEALTHCHECK_RETRIES}
H_URL=${IGNIS_HEALTHCHECK_URL}

sleep inf & FD=/proc/$!/fd
export IGNIS_JOB_STDOUT=${FD}/1
export IGNIS_JOB_STDERR=${FD}/2

SSH_DIR="${IGNIS_JOB_CONTAINER_DIR}/ssh"
_IGNIS_ENVIRONMENT="${IGNIS_JOB_CONTAINER_DIR}/environment"
mkdir -p -m 700 "${SSH_DIR}"
mkdir -p -m 700 "${IGNIS_JOB_SOCKETS}"
export -p > "${_IGNIS_ENVIRONMENT}"

cp /etc/ssh/sshd_config "${SSH_DIR}"
chmod 600 "${SSH_DIR}/sshd_config"
ssh-keygen -q -N "" -t rsa -b 2048 -f "${SSH_DIR}/ssh_host_rsa_key"
printf "%s" "${IGNIS_CRYPTO_PUBLIC}" >"${SSH_DIR}/authorized_keys"

if [ "$(id -u)" == "0" ]; then
  sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' "${SSH_DIR}/sshd_config"
fi
sed -i 's/UsePAM yes/UsePAM no/g' "${SSH_DIR}/sshd_config" && \
sed -i 's/#StrictModes yes/StrictModes no/g' "${SSH_DIR}/sshd_config" && \
sed -i "s|#AuthorizedKeysFile.*|AuthorizedKeysFile \"${SSH_DIR}/authorized_keys\"|" "${SSH_DIR}/sshd_config"

sshd(){
  /usr/sbin/sshd -p $1 \
                -f "${SSH_DIR}/sshd_config" \
                -h "${SSH_DIR}/ssh_host_rsa_key" \
                -o "PidFile=\"${SSH_DIR}/sshd.pid\"" \
                -o "SetEnv=PATH=\"${PATH}\" IGNIS_HOME=\"${IGNIS_HOME}\" _IGNIS_ENVIRONMENT=\"${_IGNIS_ENVIRONMENT}\"" \
                -e -D 2>&1 | tee /dev/stderr | grep "^Server listening" > "${IGNIS_JOB_CONTAINER_DIR}/check" &
}

host_sshd(){
  BASE=$(shuf -i 1-64000 -n 1)
  for i in {1..64000}; do
    PORT=$((($BASE+$i)%64000+1024))
    sshd ${PORT}
    while [ -e "/proc/${SSHD_PID}" ]; do
      if grep -q "^Server listening" "${IGNIS_JOB_CONTAINER_DIR}/check"; then
        break 2
      fi
      sleep 1
    done
  done
}

if [ "${PORT}" != "0" ];then
  sshd ${PORT}
else
  host_sshd
  if [ "${IGNIS_DISCOVERY_TYPE}" == "file" ]; then
    echo "${HOST_HOSTNAME}:${PORT}" > "${IGNIS_JOB_CONTAINER_DIR}/discovery"
  elif [ "${IGNIS_DISCOVERY_TYPE}" == "etcd" ]; then #TODO etcd
    #URL=$IGNIS_DISCOVERY_TARGET
    #if [ -n "${IGNIS_CRYPTO_SECRET}"]; then
    #  URL=$(ignis-crypto decode ${IGNIS_CRYPTO_SECRET} <<<${URL}))
    #fi
    #for i in {1..${H_RETRIES}}; do
    #  curl --output /dev/null --silent --head --fail -H "PORT:$PORT" -H "INDEX:${!IGNIS_SCHEDULER_INDEX}" \
    #       --connect-timeout ${H_TIMEOUT} ${URL} && \
    #  s=0 && break || s=$? && sleep ${H_INTERVAL}
    #done
    if [ "$s" != "0" ];then
      echo "Failed to connect to $URL" 1>&2
      exit $s
    fi
  fi
fi

trap "exit 0" TERM
if [ "${MODE}" == "driver" ]; then
  echo "Waiting client connection" 1>&2
  for i in {1..60}; do
    if [ -f "${IGNIS_JOB_CONTAINER_DIR}/client.pid" ]; then
      break
    fi
    sleep 1
  done
  if [ ! -f "${IGNIS_JOB_CONTAINER_DIR}/client.pid" ]; then
    echo "Client connection timeout" 1>&2
    exit -1
  fi
  echo "Client connected" 1>&2
  tail --pid $(cat "${IGNIS_JOB_CONTAINER_DIR}/client.pid") -f /dev/null 2>/dev/null
  kill -9 $(cat "${SSH_DIR}/sshd.pid")
  echo "Client disconnected" 1>&2
  exit 0
elif [ "${MODE}" == "executor" ] && [ -z "${IGNIS_HEALTHCHECK_DISABLE}" ]; then
  while true; do
    sleep ${H_INTERVAL}
    for i in {1..${H_RETRIES}}; do
      curl --output /dev/null --silent --head --fail --connect-timeout ${H_TIMEOUT} ${H_URL} && continue 2
    done
    echo "Driver lost, exiting" 1>&2
    exit 1
  done
fi
sleep inf
